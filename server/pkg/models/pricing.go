// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CHECK24 GenDev 7 API
 *
 * API for the 7th CHECK24 GenDev challenge providing product offerings from five different internet providers
 *
 * API version: dev
 */

package models

import (
	"errors"
)

type Pricing struct {
	MonthlyCostInCent int32 `json:"monthlyCostInCent"`

	ContractDurationInMonths *int32 `json:"contractDurationInMonths,omitempty"`

	MinContractDurationInMonths *int32 `json:"minContractDurationInMonths,omitempty"`

	MaxAgeInJears *int32 `json:"maxAgeInJears,omitempty"`

	MinOrderValueInCent *int32 `json:"minOrderValueInCent,omitempty"`

	MinAgeInYears *int32 `json:"minAgeInYears,omitempty"`

	InstallationServiceIncluded bool `json:"installationServiceIncluded,omitempty"`

	SubsequentCosts *SubsequentCost `json:"subsequentCosts,omitempty"`

	AbsoluteDiscount *AbsoluteDiscount `json:"AbsoluteDiscount,omitempty"`

	PercentageDiscount *PercentageDiscount `json:"PercentageDiscount,omitempty"`
}

// AssertPricingRequired checks if the required fields are not zero-ed
func AssertPricingRequired(obj Pricing) error {
	elements := map[string]interface{}{
		"monthlyCostInCent": obj.MonthlyCostInCent,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.SubsequentCosts != nil {
		if err := AssertSubsequentCostRequired(*obj.SubsequentCosts); err != nil {
			return err
		}
	}
	if obj.AbsoluteDiscount != nil {
		if err := AssertAbsoluteDiscountRequired(*obj.AbsoluteDiscount); err != nil {
			return err
		}
	}
	if obj.PercentageDiscount != nil {
		if err := AssertPercentageDiscountRequired(*obj.PercentageDiscount); err != nil {
			return err
		}
	}
	return nil
}

// AssertPricingConstraints checks if the values respects the defined constraints
func AssertPricingConstraints(obj Pricing) error {
	if obj.MonthlyCostInCent < 0 {
		return &ParsingError{Param: "MonthlyCostInCent", Err: errors.New(ErrMsgMinValueConstraint)}
	}
	if obj.ContractDurationInMonths != nil && *obj.ContractDurationInMonths < 0 {
		return &ParsingError{Param: "ContractDurationInMonths", Err: errors.New(ErrMsgMinValueConstraint)}
	}
	if obj.MinContractDurationInMonths != nil && *obj.MinContractDurationInMonths < 0 {
		return &ParsingError{Param: "MinContractDurationInMonths", Err: errors.New(ErrMsgMinValueConstraint)}
	}
	if obj.MaxAgeInJears != nil && *obj.MaxAgeInJears < 0 {
		return &ParsingError{Param: "MaxAgeInJears", Err: errors.New(ErrMsgMinValueConstraint)}
	}
	if obj.MinOrderValueInCent != nil && *obj.MinOrderValueInCent < 0 {
		return &ParsingError{Param: "MinOrderValueInCent", Err: errors.New(ErrMsgMinValueConstraint)}
	}
	if obj.MinAgeInYears != nil && *obj.MinAgeInYears < 0 {
		return &ParsingError{Param: "MinAgeInYears", Err: errors.New(ErrMsgMinValueConstraint)}
	}
	if obj.SubsequentCosts != nil {
		if err := AssertSubsequentCostConstraints(*obj.SubsequentCosts); err != nil {
			return err
		}
	}
	if obj.AbsoluteDiscount != nil {
		if err := AssertAbsoluteDiscountConstraints(*obj.AbsoluteDiscount); err != nil {
			return err
		}
	}
	if obj.PercentageDiscount != nil {
		if err := AssertPercentageDiscountConstraints(*obj.PercentageDiscount); err != nil {
			return err
		}
	}
	return nil
}

func CanonicalizePricing(obj Pricing) Pricing {

	// Remove any subsequent costs if they start after the contract duration
	if obj.SubsequentCosts != nil &&
		obj.ContractDurationInMonths != nil &&
		obj.SubsequentCosts.StartMonth > *obj.ContractDurationInMonths {
		obj.SubsequentCosts = nil
	}

	if obj.MinAgeInYears != nil && *obj.MinAgeInYears == 0 {
		obj.MinAgeInYears = nil
	}
	if obj.MaxAgeInJears != nil && *obj.MaxAgeInJears == 0 {
		obj.MaxAgeInJears = nil
	}

	if obj.MinOrderValueInCent != nil && *obj.MinOrderValueInCent == 0 {
		obj.MinOrderValueInCent = nil
	}

	if obj.MinContractDurationInMonths != nil && *obj.MinContractDurationInMonths == 0 {
		obj.MinContractDurationInMonths = nil
	}

	if obj.AbsoluteDiscount != nil {
		if obj.AbsoluteDiscount.ValueInCent == 0 {
			obj.AbsoluteDiscount = nil
		} else if obj.AbsoluteDiscount.MinOrderValueInCent != nil && *obj.AbsoluteDiscount.MinOrderValueInCent == 0 {
			obj.AbsoluteDiscount.MinOrderValueInCent = nil
		}
	}

	if obj.PercentageDiscount != nil {
		if obj.PercentageDiscount.Percentage == 0 {
			obj.PercentageDiscount = nil
		} else if obj.PercentageDiscount.MaxDiscountInCent != nil && *obj.PercentageDiscount.MaxDiscountInCent == 0 {
			// if max discount is zero, we can remove it
			obj.PercentageDiscount = nil
		}
	}

	return obj
}
