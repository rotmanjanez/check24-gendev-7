// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CHECK24 GenDev 7 API
 *
 * API for the 7th CHECK24 GenDev challenge providing product offerings from five different internet providers
 *
 * API version: dev
 */

package models

import (
	"fmt"
)

// ConnectionType : Type of internet connection
type ConnectionType string

// List of ConnectionType
const (
	DSL    ConnectionType = "DSL"
	CABLE  ConnectionType = "CABLE"
	FIBER  ConnectionType = "FIBER"
	MOBILE ConnectionType = "MOBILE"
)

// AllowedConnectionTypeEnumValues is all the allowed values of ConnectionType enum
var AllowedConnectionTypeEnumValues = []ConnectionType{
	"DSL",
	"CABLE",
	"FIBER",
	"MOBILE",
}

// validConnectionTypeEnumValue provides a map of ConnectionTypes for fast verification of use input
var validConnectionTypeEnumValues = map[ConnectionType]struct{}{
	"DSL":    {},
	"CABLE":  {},
	"FIBER":  {},
	"MOBILE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionType) IsValid() bool {
	_, ok := validConnectionTypeEnumValues[v]
	return ok
}

// NewConnectionTypeFromValue returns a pointer to a valid ConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionTypeFromValue(v string) (ConnectionType, error) {
	ev := ConnectionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ConnectionType: valid values are %v", v, AllowedConnectionTypeEnumValues)
}

// AssertConnectionTypeRequired checks if the required fields are not zero-ed
func AssertConnectionTypeRequired(obj ConnectionType) error {
	return nil
}

// AssertConnectionTypeConstraints checks if the values respects the defined constraints
func AssertConnectionTypeConstraints(obj ConnectionType) error {
	return nil
}
