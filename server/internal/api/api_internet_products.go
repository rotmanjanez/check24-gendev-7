// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CHECK24 GenDev 7 API
 *
 * API for the 7th CHECK24 GenDev challenge providing product offerings from five different internet providers
 *
 * API version: dev
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"

	"github.com/rotmanjanez/check24-gendev-7/pkg/models"
)

// InternetProductsAPIController binds http requests to an api service and writes the service results to the http response
type InternetProductsAPIController struct {
	service      InternetProductsAPIServicer
	errorHandler ErrorHandler
}

// InternetProductsAPIOption for how the controller is set up.
type InternetProductsAPIOption func(*InternetProductsAPIController)

// WithInternetProductsAPIErrorHandler inject ErrorHandler into controller
func WithInternetProductsAPIErrorHandler(h ErrorHandler) InternetProductsAPIOption {
	return func(c *InternetProductsAPIController) {
		c.errorHandler = h
	}
}

// NewInternetProductsAPIController creates a default api controller
func NewInternetProductsAPIController(s InternetProductsAPIServicer, opts ...InternetProductsAPIOption) *InternetProductsAPIController {
	controller := &InternetProductsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the InternetProductsAPIController
func (c *InternetProductsAPIController) Routes() Routes {
	return Routes{
		"InitiateInternetProductsQuery": Route{
			strings.ToUpper("Post"),
			"/internet-products",
			c.InitiateInternetProductsQuery,
		},
		"ContinueInternetProductsQuery": Route{
			strings.ToUpper("Get"),
			"/internet-products/continue",
			c.ContinueInternetProductsQuery,
		},
		"GetSharedInternetProducts": Route{
			strings.ToUpper("Get"),
			"/internet-products/share/{cursor}",
			c.GetSharedInternetProducts,
		},
		"ShareInternetProducts": Route{
			strings.ToUpper("Post"),
			"/internet-products/share/{cursor}",
			c.ShareInternetProducts,
		},
	}
}

// InitiateInternetProductsQuery -
func (c *InternetProductsAPIController) InitiateInternetProductsQuery(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var addressParam models.Address
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addressParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertAddressRequired(addressParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertAddressConstraints(addressParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var providersParam []string
	if query.Has("providers") {
		providersParam = strings.Split(query.Get("providers"), ",")
	}
	result, err := c.service.InitiateInternetProductsQuery(r.Context(), addressParam, providersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w, result.Headers)
}

// ContinueInternetProductsQuery -
func (c *InternetProductsAPIController) ContinueInternetProductsQuery(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var cursorParam string
	if query.Has("cursor") {
		param := query.Get("cursor")

		cursorParam = param
	} else {
		c.errorHandler(w, r, &models.RequiredError{Field: "cursor"}, nil)
		return
	}
	result, err := c.service.ContinueInternetProductsQuery(r.Context(), cursorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w, result.Headers)
}

// GetSharedInternetProducts -
func (c *InternetProductsAPIController) GetSharedInternetProducts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	cursorParam := params["cursor"]
	if cursorParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "cursor"}, nil)
		return
	}
	result, err := c.service.GetSharedInternetProducts(r.Context(), cursorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w, result.Headers)
}

// ShareInternetProducts -
func (c *InternetProductsAPIController) ShareInternetProducts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	cursorParam := params["cursor"]
	if cursorParam == "" {
		c.errorHandler(w, r, &models.RequiredError{Field: "cursor"}, nil)
		return
	}
	result, err := c.service.ShareInternetProducts(r.Context(), cursorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w, result.Headers)
}
