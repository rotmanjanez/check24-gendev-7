// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CHECK24 GenDev 7 API
 *
 * API for the 7th CHECK24 GenDev challenge providing product offerings from five different internet providers
 *
 * API version: dev
 */

package api

import (
	"net/http"
	"strings"
)

// HealthAPIController binds http requests to an api service and writes the service results to the http response
type HealthAPIController struct {
	service      HealthAPIServicer
	errorHandler ErrorHandler
}

// HealthAPIOption for how the controller is set up.
type HealthAPIOption func(*HealthAPIController)

// WithHealthAPIErrorHandler inject ErrorHandler into controller
func WithHealthAPIErrorHandler(h ErrorHandler) HealthAPIOption {
	return func(c *HealthAPIController) {
		c.errorHandler = h
	}
}

// NewHealthAPIController creates a default api controller
func NewHealthAPIController(s HealthAPIServicer, opts ...HealthAPIOption) *HealthAPIController {
	controller := &HealthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HealthAPIController
func (c *HealthAPIController) Routes() Routes {
	return Routes{
		"HealthCheck": Route{
			strings.ToUpper("Get"),
			"/health",
			c.HealthCheck,
		},
	}
}

// HealthCheck - Health check endpoint
func (c *HealthAPIController) HealthCheck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HealthCheck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w, result.Headers)
}
